#! /bin/sh
### BEGIN INIT INFO
# Provides:          @brand@
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $network $named $time mysql
# Should-Stop:       mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: open-sTeam server init script
# Description:       This script controls the open-sTeam server
# X-UnitedLinux-Default-Enabled: yes
### END INIT INFO

# Author: Robert Hinn <exodus@uni-paderborn.de>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="open-sTeam server"
NAME=@brand@
STEAM_HOME=@steamdir@
DAEMON=$STEAM_HOME/bin/$NAME
DAEMON_ARGS="--auto-restart"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the program is not installed (return code 5)
[ -x "$DAEMON" ] || exit 5

# Read configuration variable file if it is present
[ -r /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
#. /lib/lsb/init-functions
# Use UnitedLinux rc.status instead:
. /etc/rc.status

# Reset status of this service
rc_reset

# try to detect a java runtime:
if [ -z $JAVA_HOME ] && [ -e /etc/alternatives/java ]; then
	# the BACKTICK is just a workaround to allow 'cut' to look for '`':
	BACKTICK="\`"
	JAVA_HOME="`LANG=C file -b /etc/alternatives/java | cut -f 2 -d "$BACKTICK" | cut -f 1 -d \' | sed -e 's/\/bin\/java$//'`"
	# Only export, if this is actually a directory.
	if [ -d "$JAVA_HOME" ]; then
		export JAVA_HOME
	fi
fi


#
# Function that starts the daemon/service
#
do_start(){
    pidofproc -p "$PIDFILE" "$NAME" > /dev/null
    [ "$?" = 0 ] && return 0
    /sbin/startproc -p "$PIDFILE" "$DAEMON" --dir="$STEAM_HOME" loader.pike --quiet --pid="$PIDFILE" "$DAEMON_ARGS"
    #start-stop-daemon --start --quiet --pidfile "$PIDFILE" --startas "$DAEMON" --test > /dev/null || return 1
    #start-stop-daemon --start --quiet --pidfile "$PIDFILE" --startas "$DAEMON" --chdir "$STEAM_HOME" -- loader.pike --quiet --pid="$PIDFILE" "$DAEMON_ARGS" &
    for x in 1 2 3 4 5 6 7 8 9 10; do
        [ -e "$PIDFILE" ] && return 0
        sleep 1
    done
    [ -e "$PIDFILE" ] && return 0
    return 2
}


#
# Function that stops the daemon/service
#
do_stop(){
    killproc -p "$PIDFILE" "$NAME" -TERM
    #start-stop-daemon --stop --quiet --pidfile "$PIDFILE" --name "$NAME"
    #RETVAL="$?"
    #[ "$RETVAL" = 2 ] && return 2
    #start-stop-daemon --stop --quiet --oknodo --exec "$DAEMON"
    [ "$?" = 2 ] && return 2
    for x in 1 2 3 4 5 6 7 8 9 10; do
        [ -e "$PIDFILE" ] || return 0
        sleep 1
    done
    [ -e "$PIDFILE" ] || return 0
    return 2
}


#
# Function that restarts the daemon/service
#
do_restart(){
    PID_BEFORE_STOP=`cat "$PIDFILE" | head -n 2 | tail -n 1 | sed -e 's/\([0-9]*\).*/\1/1'`
    /sbin/startproc -p "$PIDFILE" "$DAEMON" --dir="$STEAM_HOME" loader.pike --quiet --restart --pid="$PIDFILE" "$DAEMON_ARGS"
    # wait for stop:
    for x in 1 2 3 4 5 6 7 8 9 10; do
        [ ! -e "$PIDFILE" ] && break
        TMP_PID=`cat "$PIDFILE" | head -n 2 | tail -n 1 | sed -e 's/\([0-9]*\).*/\1/1'`
        [ "$TMP_PID" != "$PID_BEFORE_STOP" ] && break;
        sleep 1
    done
    PID_AFTER_STOP=0
    [ -e "$PIDFILE" ] && PID_AFTER_STOP=`cat "$PIDFILE" | head -n 2 | tail -n 1 | sed -e 's/\([0-9]*\).*/\1/1'`
    [ "$PID_BEFORE_STOP" = "$PID_AFTER_STOP" ] && return 1 # could not stop
    # wait for start:
    for x in 1 2 3 4 5 6 7 8 9 10; do
        [ -e "$PIDFILE" ] && break
        sleep 1
    done
    [ -e "$PIDFILE" ] && return 0; # restarted
    return 2 # could not start
}


#
# Function that sends a SIGHUP to the daemon/service
#
do_reload(){
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	echo -n "Starting $DESC" "$NAME"
	do_start
        rc_status -v
	;;
  stop)
	echo -n "Stopping $DESC" "$NAME"
	do_stop
        rc_status -v
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
        if [ -e "$PIDFILE" ]; then
	    echo -n "Restarting $DESC" "$NAME"
            do_restart
            rc_status -v
        else
	    echo -n "Starting $DESC" "$NAME"
	    do_start
            rc_status -v
        fi
	;;
  status)
        echo -n "Checking for service $NAME "
        pidofproc -p "$PIDFILE" "$NAME" > /dev/null
        rc_status -v
        ;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
	exit 3
	;;
esac
rc_exit
